{"ast":null,"code":"var _jsxFileName = \"/Users/skneupane/Documents/Portfolio/react-portfolio/src/context/theme-context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useReducer, useEffect } from \"react\";\nimport themeReducer from \"./themeReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\n\n// get theme settings from local storage, or use default theme\nconst initialThemeState = JSON.parse(localStorage.getItem('themeSettings')) || {\n  primary: 'color-1',\n  background: 'bg-1'\n};\nexport const ThemeProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [themeState, dispatchTheme] = useReducer(themeReducer, initialThemeState);\n  const themeHandler = buttonClassName => {\n    dispatchTheme({\n      type: buttonClassName\n    });\n  };\n\n  // save theme settings to local storage\n  useEffect(() => {\n    localStorage.setItem('themeSettings', JSON.stringify(themeState));\n  }, [themeState.primary, themeState.background]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      themeState,\n      themeHandler\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 12\n  }, this);\n};\n\n// custom hook to use our theme context wherever we want in our project\n_s(ThemeProvider, \"HeLUJh4A2eGPGzav1yUzlu51q88=\");\n_c = ThemeProvider;\nexport const useThemeContext = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useThemeContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["createContext","useContext","useReducer","useEffect","themeReducer","ThemeContext","initialThemeState","JSON","parse","localStorage","getItem","primary","background","ThemeProvider","children","themeState","dispatchTheme","themeHandler","buttonClassName","type","setItem","stringify","useThemeContext"],"sources":["/Users/skneupane/Documents/Portfolio/react-portfolio/src/context/theme-context.js"],"sourcesContent":["import {createContext, useContext, useReducer, useEffect} from \"react\"\r\nimport themeReducer from \"./themeReducer\";\r\n\r\nexport const ThemeContext = createContext();\r\n\r\n// get theme settings from local storage, or use default theme\r\nconst initialThemeState = JSON.parse(localStorage.getItem('themeSettings')) || {primary: 'color-1', background: 'bg-1'}\r\n\r\nexport const ThemeProvider = ({children}) => {\r\n    const [themeState, dispatchTheme] = useReducer(themeReducer, initialThemeState);\r\n\r\n    const themeHandler = (buttonClassName) => {\r\n        dispatchTheme({type: buttonClassName})\r\n    }\r\n\r\n    // save theme settings to local storage\r\n    useEffect(() => {\r\n        localStorage.setItem('themeSettings', JSON.stringify(themeState))\r\n    }, [themeState.primary, themeState.background])\r\n\r\n\r\n    return <ThemeContext.Provider value={{themeState, themeHandler}}>{children}</ThemeContext.Provider>\r\n}\r\n\r\n\r\n// custom hook to use our theme context wherever we want in our project\r\nexport const useThemeContext = () => {\r\n    return useContext(ThemeContext);\r\n}"],"mappings":";;;AAAA,SAAQA,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAO,OAAO;AACtE,OAAOC,YAAY,MAAM,gBAAgB;AAAC;AAE1C,OAAO,MAAMC,YAAY,gBAAGL,aAAa,EAAE;;AAE3C;AACA,MAAMM,iBAAiB,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI;EAACC,OAAO,EAAE,SAAS;EAAEC,UAAU,EAAE;AAAM,CAAC;AAEvH,OAAO,MAAMC,aAAa,GAAG,QAAgB;EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC;EACpC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,UAAU,CAACE,YAAY,EAAEE,iBAAiB,CAAC;EAE/E,MAAMW,YAAY,GAAIC,eAAe,IAAK;IACtCF,aAAa,CAAC;MAACG,IAAI,EAAED;IAAe,CAAC,CAAC;EAC1C,CAAC;;EAED;EACAf,SAAS,CAAC,MAAM;IACZM,YAAY,CAACW,OAAO,CAAC,eAAe,EAAEb,IAAI,CAACc,SAAS,CAACN,UAAU,CAAC,CAAC;EACrE,CAAC,EAAE,CAACA,UAAU,CAACJ,OAAO,EAAEI,UAAU,CAACH,UAAU,CAAC,CAAC;EAG/C,oBAAO,QAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,EAAE;MAACG,UAAU;MAAEE;IAAY,CAAE;IAAA,UAAEH;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAyB;AACvG,CAAC;;AAGD;AAAA,GAjBaD,aAAa;AAAA,KAAbA,aAAa;AAkB1B,OAAO,MAAMS,eAAe,GAAG,MAAM;EAAA;EACjC,OAAOrB,UAAU,CAACI,YAAY,CAAC;AACnC,CAAC;AAAA,IAFYiB,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}